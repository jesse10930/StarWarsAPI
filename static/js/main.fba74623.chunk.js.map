{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/Button.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","main","cat1","name1","cat2","name2","cat3","name3","cat4","name4","react_default","a","createElement","className","CardList","info","map","data","i","categories","Object","entries","Components_Card","key","Button","buttonClick","id","onClick","Scroll","props","style","overflowY","border","height","children","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onButtonClick","event","category","target","setState","grabNext","url","Promise","resolve","reject","fetch","then","resp","json","state","concat","results","next","resolve2","urls","_this2","Components_Button","Components_Scroll","Components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fba74623.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ main, cat1, name1, cat2, name2, cat3, name3, cat4, name4 }) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-gray dib w-25 br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<h1>{main}</h1>\r\n\t\t\t<p>{cat1}: {name1}</p>\r\n\t\t\t<p>{cat2}: {name2}</p>\r\n\t\t\t<p>{cat3}: {name3}</p>\r\n\t\t\t<p>{cat4}: {name4}</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ info }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{info.map((data, i) => {\r\n\t\t\t\t\tconst categories = Object.entries(data);\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\tmain={categories[0][1]}\r\n\t\t\t\t\t\t\tcat1={categories[1][0]}\r\n\t\t\t\t\t\t\tname1={categories[1][1]}\r\n\t\t\t\t\t\t\tcat2={categories[2][0]}\r\n\t\t\t\t\t\t\tname2={categories[2][1]}\r\n\t\t\t\t\t\t\tcat3={categories[3][0]}\r\n\t\t\t\t\t\t\tname3={categories[3][1]}\r\n\t\t\t\t\t\t\tcat4={categories[4][0]}\r\n\t\t\t\t\t\t\tname4={categories[4][1]}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Button = ({ buttonClick }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<button className='pa3 ma2' id='films' onClick={ buttonClick }>\r\n\t\t\t\tFilms\r\n\t\t\t</button>\r\n\t\t\t<button className='pa3 ma2' id='people' onClick={ buttonClick }>\r\n\t\t\t\tPeople\r\n\t\t\t</button>\r\n\t\t\t<button className='pa3 ma2' id='planets' onClick={ buttonClick }>\r\n\t\t\t\tPlanets\r\n\t\t\t</button>\r\n\t\t\t<button className='pa3 ma2' id='species' onClick={ buttonClick }>\r\n\t\t\t\tSpecies\r\n\t\t\t</button>\r\n\t\t\t<button className='pa3 ma2' id='starships' onClick={ buttonClick }>\r\n\t\t\t\tStarships\r\n\t\t\t</button>\r\n\t\t\t<button className='pa3 ma2' id='vehicles' onClick={ buttonClick }>\r\n\t\t\t\tVehicles\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{ overflowY: 'scroll', border: '1px solid black', height: '600px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport Button from '../Components/Button';\r\nimport Scroll from '../Components/Scroll';\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tinfo: [],\r\n\t\t\turls: []\r\n\t\t}\r\n\t}\r\n\r\ncomponentDidMount() {\r\n\tfetch('https://swapi.dev/api/')\r\n\t\t.then(resp => resp.json())\r\n\t\t.then(data => this.setState({ urls: data }))\r\n}\r\n\r\nonButtonClick = (event) => {\r\n\tlet category = event.target.id;\r\n\tthis.setState({ info: [] });\r\n\tlet grabAll = (input) => {\r\n\t\tlet grabNext = (url) => {\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\tfetch(url)\r\n\t\t\t\t\t.then(resp => resp.json())\r\n\t\t\t\t\t.then(data => {\r\n\t\t\t\t\t\tthis.setState({ info: this.state.info.concat(data.results)});\r\n\t\t\t\t\t\tif(data.next === null) {\r\n\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tgrabNext(data.next).then(resolve2 => {\r\n\t\t\t\t\t\t\t\tresolve(resolve2);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t})\r\n\t\t}\r\n\t\tgrabNext(input);\r\n\t}\r\n\tgrabAll(this.state.urls[category]);\r\n}\r\n\r\nrender() {\r\n\t\treturn (\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1>Star Wars Specs</h1>\r\n\t\t\t\t<Button buttonClick={this.onButtonClick}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList info={this.state.info}/>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}